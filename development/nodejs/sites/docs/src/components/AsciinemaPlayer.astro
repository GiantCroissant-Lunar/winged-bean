---
import 'asciinema-player/dist/bundle/asciinema-player.css';

interface Props {
  src: string;
  /** Optional image URL displayed before playback */
  poster?: string;
  cols?: number;
  rows?: number;
  autoPlay?: boolean;
  preload?: 'auto' | 'none';
  loop?: boolean;
  startAt?: number;
}

const {
  src,
  poster,
  cols = 80,
  rows = 24,
  autoPlay = false,
  preload = 'auto',
  loop = false,
  startAt
} = Astro.props as Props;

const elementId = `asciinema-player-${Math.random().toString(36).slice(2)}`;

const options = {
  poster,
  cols,
  rows,
  autoplay: autoPlay,
  preload,
  loop,
  startAt
};

const filteredOptions = Object.fromEntries(
  Object.entries(options).filter(([, value]) => value !== undefined)
);

---
<div
  id={elementId}
  class="asciinema-player"
  data-src={src}
  data-options={JSON.stringify(filteredOptions)}
  data-id={elementId}
></div>

<script type="module" is:inline>
  function initPlayer() {
    const containers = document.querySelectorAll('.asciinema-player');

    if (!window.AsciinemaPlayer) {
      console.error('[AsciinemaPlayer] window.AsciinemaPlayer not found. Script may not have loaded.');
      containers.forEach(c => {
        c.textContent = '⚠️ Asciinema player script not loaded. Check console.';
        c.style.padding = '1rem';
        c.style.border = '1px solid red';
      });
      return;
    }

    containers.forEach(container => {
      const rawOptions = container.dataset.options;
      let options = {};

      if (rawOptions) {
        try {
          options = JSON.parse(rawOptions);
        } catch (error) {
          console.error('[AsciinemaPlayer] Failed to parse options:', error);
          container.textContent = '⚠️ Failed to parse player options.';
          return;
        }
      }

      const castSrc = container.dataset.src ?? '';
      console.log('[AsciinemaPlayer] Initializing with src:', castSrc, 'options:', options);

      try {
        window.AsciinemaPlayer.create(castSrc, container, options);
        console.log('[AsciinemaPlayer] Player created successfully');
      } catch (error) {
        console.error('[AsciinemaPlayer] Failed to create player:', error);
        container.textContent = `⚠️ Failed to initialize player: ${error.message}`;
        container.style.padding = '1rem';
        container.style.border = '1px solid orange';
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPlayer);
  } else {
    initPlayer();
  }
</script>
