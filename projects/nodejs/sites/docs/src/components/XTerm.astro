---
// XTerm component for displaying terminal in web
interface Props {
  id?: string;
  websocketUrl?: string;
}

const {
  id = 'live-terminal',
  websocketUrl = 'ws://localhost:4041'
} = Astro.props as Props;
---

<div id={id} data-ws-url={websocketUrl} style="width: 100%; height: 400px; border: 1px solid #ccc; border-radius: 4px; background: #1e1e1e; color: #f8f8f2; padding: 20px; font-family: 'Consolas', 'Liberation Mono', Menlo, monospace; overflow: auto;">
  <div id="terminal-output">
    Loading xterm.js terminal...
  </div>
</div>

<!-- Load xterm.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Wait for xterm to load
    const waitForXTerm = () => {
      return new Promise((resolve) => {
        const check = () => {
          if (typeof window.Terminal !== 'undefined') {
            resolve(window.Terminal);
          } else {
            setTimeout(check, 100);
          }
        };
        check();
      });
    };

    try {
      const Terminal = await waitForXTerm();
      const container = document.getElementById('live-terminal');
      const wsUrl = (container && container.dataset && container.dataset.wsUrl) ? container.dataset.wsUrl : 'ws://localhost:4041';

      if (container && Terminal) {
        // Clear loading message
        container.innerHTML = '';

        // Create terminal
        const terminal = new Terminal({
          cols: 80,
          rows: 24,
          fontSize: 14,
          fontFamily: 'Consolas, "Liberation Mono", Menlo, monospace',
          theme: {
            background: '#1e1e1e',
            foreground: '#f8f8f2',
            cursor: '#f8f8f0',
            cursorAccent: '#1e1e1e',
            selection: 'rgba(248, 248, 242, 0.3)',
            black: '#000000',
            red: '#ff5555',
            green: '#50fa7b',
            yellow: '#f1fa8c',
            blue: '#bd93f9',
            magenta: '#ff79c6',
            cyan: '#8be9fd',
            white: '#bfbfbf',
            brightBlack: '#4d4d4d',
            brightRed: '#ff6e6e',
            brightGreen: '#69ff94',
            brightYellow: '#ffffa5',
            brightBlue: '#d6acff',
            brightMagenta: '#ff92df',
            brightCyan: '#a4ffff',
            brightWhite: '#e6e6e6'
          }
        });

        terminal.open(container);
        terminal.writeln('xterm.js terminal loaded successfully!');
        terminal.writeln(`Connecting to PTY service at ${wsUrl}...`);
        terminal.writeln('Starting real Terminal.Gui v2 application...');
        terminal.writeln('');

        // WebSocket connection for PTY
        let ws = null;

        const connectWebSocket = () => {
          if (ws) {
            ws.close();
          }

          ws = new WebSocket(wsUrl);
          // Set binary type to handle raw PTY output
          ws.binaryType = 'arraybuffer';

          ws.onopen = () => {
            terminal.writeln('PTY WebSocket connected! Terminal.Gui is starting...');

            // Send initial terminal size
            const payload = JSON.stringify({
              type: 'resize',
              cols: terminal.cols,
              rows: terminal.rows
            });
            ws.send(payload);
          };

          ws.onmessage = (event) => {
            // Handle binary data from PTY (raw terminal output)
            if (event.data instanceof ArrayBuffer) {
              const uint8Array = new Uint8Array(event.data);
              terminal.write(uint8Array);
            } else {
              // Handle text data (fallback)
              terminal.write(event.data);
            }
          };

          ws.onclose = (event) => {
            terminal.writeln(`\r\nPTY disconnected (${event.code}: ${event.reason}). Reconnecting...`);
            setTimeout(connectWebSocket, 3000);
          };

          ws.onerror = (error) => {
            console.error('PTY WebSocket error:', error);
            terminal.writeln('\r\nPTY connection error.');
          };
        };

        // Handle terminal input - send raw data to PTY
        terminal.onData(data => {
          if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(data);
          }
        });

        // Handle terminal resize - notify PTY
        terminal.onResize(({cols, rows}) => {
          if (ws && ws.readyState === WebSocket.OPEN) {
            const payload = JSON.stringify({
              type: 'resize',
              cols: cols,
              rows: rows
            });
            ws.send(payload);
          }
        });

        connectWebSocket();
      }
    } catch (error) {
      console.error('Failed to initialize xterm.js:', error);
      const output = document.getElementById('terminal-output');
      if (output) {
        output.textContent = 'Failed to load xterm.js terminal. Error: ' + error.message;
      }
    }
  });
</script>
