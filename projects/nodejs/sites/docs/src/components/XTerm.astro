---
// XTerm component for displaying terminal in web
interface Props {
  id?: string;
  websocketUrl?: string;
}

const {
  id = 'live-terminal',
  websocketUrl = 'ws://localhost:4041'
} = Astro.props as Props;
---

<link rel="stylesheet" href="/node_modules/xterm/css/xterm.css" />

<div id={id} data-ws-url={websocketUrl} data-terminal-id={id} style="width: 100%; height: 400px; border: 1px solid #ccc; border-radius: 4px; background: #1e1e1e;">
</div>

<script>
  import { Terminal } from 'xterm';

  document.addEventListener('DOMContentLoaded', async () => {
    // Find all terminal containers with data-terminal-id attribute
    const containers = document.querySelectorAll('[data-terminal-id]');

    containers.forEach(container => {
      const terminalId = container.dataset.terminalId;
      const wsUrl = container.dataset.wsUrl || 'ws://localhost:4041';

      if (container && !container.dataset.initialized) {
        // Mark as initialized to prevent double initialization
        container.dataset.initialized = 'true';
      // Clear loading message
      container.innerHTML = '';

      // Create terminal
      const terminal = new Terminal({
        cols: 80,
        rows: 24,
        fontSize: 14,
        fontFamily: 'Consolas, "Liberation Mono", Menlo, monospace',
        theme: {
          background: '#1e1e1e',
          foreground: '#f8f8f2',
          cursor: '#f8f8f0',
          cursorAccent: '#1e1e1e',
          selection: 'rgba(248, 248, 242, 0.3)',
          black: '#000000',
          red: '#ff5555',
          green: '#50fa7b',
          yellow: '#f1fa8c',
          blue: '#bd93f9',
          magenta: '#ff79c6',
          cyan: '#8be9fd',
          white: '#bfbfbf',
          brightBlack: '#4d4d4d',
          brightRed: '#ff6e6e',
          brightGreen: '#69ff94',
          brightYellow: '#ffffa5',
          brightBlue: '#d6acff',
          brightMagenta: '#ff92df',
          brightCyan: '#a4ffff',
          brightWhite: '#e6e6e6'
        }
      });

      terminal.open(container);
      terminal.writeln('xterm.js terminal loaded successfully!');
      terminal.writeln(`Connecting to ConsoleDungeon WebSocket at ${wsUrl}...`);
      terminal.writeln('Terminal.Gui v2 interface will appear shortly...');
      terminal.writeln('');

      // WebSocket connection for ConsoleDungeon
      let ws = null;

      const connectWebSocket = () => {
        if (ws) {
          ws.close();
        }

        ws = new WebSocket(wsUrl);

        ws.onopen = () => {
          terminal.writeln('WebSocket connected! Requesting Terminal.Gui interface...');
          // Send init message to get the initial screen
          ws.send('init');
        };

        ws.onmessage = (event) => {
          // Handle text data from ConsoleDungeon
          const message = event.data;

          // Check if it's a screen update message
          if (message.startsWith('screen:')) {
            const screenContent = message.substring(7); // Remove 'screen:' prefix
            // Write the screen content which includes ANSI escape sequences
            terminal.write(screenContent);
          } else {
            // Handle other message types
            terminal.write(message);
          }
        };

        ws.onclose = (event) => {
          terminal.writeln(`\r\nWebSocket disconnected (${event.code}: ${event.reason}). Reconnecting...`);
          setTimeout(connectWebSocket, 3000);
        };

        ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          terminal.writeln('\r\nWebSocket connection error.');
        };
      };

      // Handle terminal input - send to ConsoleDungeon
      terminal.onData(data => {
        if (ws && ws.readyState === WebSocket.OPEN) {
          // Send key data in the format expected by ConsoleDungeon
          ws.send(`key:${data}`);
        }
      });

      // Handle terminal resize
      terminal.onResize(({cols, rows}) => {
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({type: 'resize', cols, rows}));
        }
      });

      connectWebSocket();
      }
    });
  });
</script>
