# build/Taskfile.yml
version: '3'

includes:
  nodejs:
    taskfile: ../development/nodejs/Taskfile.yml
    dir: ../development/nodejs
  console:
    taskfile: ../development/dotnet/console/Taskfile.yml
    dir: ../development/dotnet/console
  framework:
    taskfile: ../development/dotnet/framework/Taskfile.yml
    dir: ../development/dotnet/framework

vars:
  VERSION:
    sh: ./get-version.sh
  FULL_VERSION:
    sh: ./get-version.sh
  ARTIFACT_DIR: _artifacts/{{.VERSION}}

tasks:
  default:
    desc: "Show available build tasks"
    cmds:
      - task --list

  setup:
    desc: "Initial project setup"
    cmds:
      - task: version
      - task: init-dirs
      - task: nodejs:install
      - echo "Setup complete!"

  ci:
    desc: "Full CI pipeline (traditional Task-based)"
    cmds:
      - task: clean
      - task: build-all
      - task: nodejs:test
      - task: test-e2e
      - echo "CI pipeline completed successfully!"

  ci-nuke:
    desc: "Full CI pipeline via Nuke (RFC-0040 - includes test metrics)"
    cmds:
      - task: nuke-ci
      - task: nodejs:test
      - task: test-e2e
      - echo "Nuke CI pipeline completed successfully!"

  version:
    desc: Show current GitVersion
    cmds:
      - 'echo "Version: {{.VERSION}}"'
      - 'echo "Full Version: {{.FULL_VERSION}}"'

  # Nuke Build Integration (RFC-0040)
  nuke-build:
    desc: "Build via Nuke components (RFC-0040)"
    dir: nuke
    cmds:
      - ./build.sh BuildAll --no-logo

  nuke-test:
    desc: "Test via Nuke (includes metric collection)"
    dir: nuke
    cmds:
      - ./build.sh Test --no-logo

  nuke-ci:
    desc: "Full Nuke CI pipeline"
    dir: nuke
    cmds:
      - ./build.sh CI --no-logo

  nuke-clean:
    desc: "Clean via Nuke"
    dir: nuke
    cmds:
      - ./build.sh Clean --no-logo

  init-dirs:
    desc: Initialize build artifact directories
    cmds:
      - mkdir -p {{.ARTIFACT_DIR}}/dotnet/{bin,packages,recordings,logs}
      - mkdir -p {{.ARTIFACT_DIR}}/web/{dist,recordings,logs,test-reports,test-results}
      - mkdir -p {{.ARTIFACT_DIR}}/pty/{dist,logs}
      - mkdir -p {{.ARTIFACT_DIR}}/_logs
      - echo "✅ Build directories initialized (added packages/ for RFC-0041)"

  build-dotnet:
    desc: "Build .NET projects (host + plugins)"
    deps: [init-dirs]
    cmds:
      - |
        set -euo pipefail
        # Build ConsoleDungeon.Host to get plugins copied via MSBuild targets
        pushd ../development/dotnet/console/src/host/ConsoleDungeon.Host >/dev/null
        dotnet build -c Debug
        SRC_BIN="$(pwd)/bin/Debug/net8.0"
        popd >/dev/null
        # Copy to artifacts bin
        rm -rf _artifacts/{{.VERSION}}/dotnet/bin/*
        cp -r "$SRC_BIN"/* _artifacts/{{.VERSION}}/dotnet/bin/

  build-web:
    desc: "Build web projects"
    deps: [init-dirs]
    dir: ../development/nodejs
    cmds:
      - pnpm run build 2>&1 | tee ../../build/{{.ARTIFACT_DIR}}/_logs/web-build.log
      - cp -r sites/docs/dist/* ../../build/{{.ARTIFACT_DIR}}/web/dist/

  build-pty:
    desc: "Build PTY service"
    deps: [init-dirs]
    dir: ../development/nodejs/pty-service
    cmds:
      # PTY service is plain JS - copy source files to artifacts and install prod deps in dist
      - |
        echo "Copying PTY service files..." | tee ../../../build/{{.ARTIFACT_DIR}}/_logs/pty-build.log
        cp -v *.js package*.json ../../../build/{{.ARTIFACT_DIR}}/pty/dist/ 2>&1 | tee -a ../../../build/{{.ARTIFACT_DIR}}/_logs/pty-build.log
        # Copy version helper next to server.js for artifact-only runtime
        cp -v ../get-version.js ../../../build/{{.ARTIFACT_DIR}}/pty/dist/ 2>&1 | tee -a ../../../build/{{.ARTIFACT_DIR}}/_logs/pty-build.log || true
        cd ../../../build/{{.ARTIFACT_DIR}}/pty/dist && npm ci --omit=dev 2>&1 | tee -a ../../_logs/pty-build.log

  build-all:
    desc: "Build all components (console, web, pty, framework)"
    deps:
      - build-dotnet
      - build-web
      - build-pty
    cmds:
      - task: framework:pack-and-sync
      - echo "All builds completed for version {{.VERSION}}"
      - task: update-latest

  update-latest:
    desc: "Copy current version to latest directory"
    internal: true
    cmds:
      - rm -rf _artifacts/latest
      - cp -r _artifacts/{{.VERSION}} _artifacts/latest
      - echo "Updated _artifacts/latest to point to version {{.VERSION}}"

  artifacts:sync-from-source:
    desc: "Sync Debug builds into versioned artifacts and update latest"
    cmds:
      - |
        set -euo pipefail
        export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
        VER="{{.VERSION}}"
        ART_ROOT="_artifacts"
        VER_DIR="$ART_ROOT/$VER"
        LATEST_DIR="$ART_ROOT/latest"
        # Create dirs
        mkdir -p "$VER_DIR/dotnet/bin" "$VER_DIR/web/dist" "$VER_DIR/pty/dist" "$VER_DIR/_logs"
        # Copy ConsoleDungeon.Host Debug bin
        SRC_BIN="../development/dotnet/console/src/host/ConsoleDungeon.Host/bin/Debug/net8.0"
        if [ ! -d "$SRC_BIN" ]; then
          echo "Building ConsoleDungeon.Host..."
          (cd ../development/dotnet/console/src/host/ConsoleDungeon.Host && dotnet build -c Debug)
        fi
        cp -R "$SRC_BIN"/* "$VER_DIR/dotnet/bin/"
        # Copy docs dist (build if missing)
        WEB_DIST_SRC="../development/nodejs/sites/docs/dist"
        if [ ! -d "$WEB_DIST_SRC" ]; then
          echo "Building docs site..."
          (cd ../development/nodejs/sites/docs && pnpm build)
        fi
        cp -R "$WEB_DIST_SRC"/* "$VER_DIR/web/dist/"
        # Copy PTY service files and install prod deps
        PTY_SRC="../development/nodejs/pty-service"
        cp -f "$PTY_SRC"/*.js "$PTY_SRC"/package*.json ../development/nodejs/get-version.js "$VER_DIR/pty/dist/" 2>/dev/null || true
        (cd "$VER_DIR/pty/dist" && npm ci --omit=dev >/dev/null)
        # Update latest
        rm -rf "$LATEST_DIR" && cp -R "$VER_DIR" "$LATEST_DIR"
        echo "✅ Artifacts synced to $VER_DIR and latest"

  pm2:stop-artifacts:
    desc: "Stop PM2 services for web/pty/console artifacts"
    cmds:
      - pm2 delete web-artifacts >/dev/null 2>&1 || true
      - pm2 delete pty-artifacts >/dev/null 2>&1 || true
      - pm2 delete console-dungeon >/dev/null 2>&1 || true
      - echo "✅ Stopped PM2 artifact services"

  pm2:start-artifacts:
    desc: "Start web(4321), pty(4041), console(artifacts) via PM2"
    deps:
      - artifacts:sync-from-source
    cmds:
      - |
        set -euo pipefail
        export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
        ROOT="$PWD/_artifacts/latest"
        # Web (static) on 4321
        pm2 start http-server --name web-artifacts --cwd "$ROOT/web/dist" -- -p 4321 -c-1
        # PTY service (ws 4041) with BIN_DIR pointing to dotnet bin
        PORT=4041 BIN_DIR="$ROOT/dotnet/bin" pm2 start server.js --name pty-artifacts --cwd "$ROOT/pty/dist"
        # Console host headless with ws 4042 to avoid conflict
        TERM=xterm-256color DUNGEON_HEADLESS=1 DUNGEON_WS_PORT=4042 pm2 start ./ConsoleDungeon.Host --name console-dungeon --cwd "$ROOT/dotnet/bin" --interpreter none
        pm2 save || true
        echo "✅ PM2 services started: web(4321), pty(4041), console(ws4042)"

  pm2:restart-artifacts:
    desc: "Restart PM2 artifact services (re-sync artifacts first)"
    deps:
      - pm2:stop-artifacts
      - pm2:start-artifacts
    cmds:
      - echo "✅ PM2 artifact services restarted"

  console:debug:
    desc: "Run ConsoleDungeon.Host from latest artifact in DEBUG_MINIMAL_UI"
    deps:
      - build-all
    cmds:
      - ./test-tools/run-debug-mode.sh

  console:normal:
    desc: "Run ConsoleDungeon.Host from latest artifact (full UI)"
    deps:
      - build-all
    cmds:
      - ./test-tools/run-normal-mode.sh

  clean:
    desc: Clean build artifacts and Task cache
    cmds:
      - rm -rf _artifacts/* .task/

  verify:console:
    desc: "Run ConsoleDungeon tests"
    dir: ../development/dotnet/console
    cmds:
      - bash -lc 'TERM=xterm-256color dotnet test Console.sln'

  verify:web:
    desc: "Run Node.js unit tests"
    cmds:
      - task: nodejs:test

  test-e2e:
    desc: "Run E2E tests against versioned artifacts"
    deps: [init-dirs, build-all]
    dir: ../development/nodejs
    cmds:
      - echo "Testing versioned artifacts at {{.ARTIFACT_DIR}}/web"
      - pnpm test:e2e

  verify:pty:
    desc: "Build PTY service bundle"
    cmds:
      - task: build-pty

  verify:xterm:
    desc: "Smoke test xterm.js integration (starts services briefly)"
    deps:
      - build-dotnet
    dir: ..
    cmds:
      - |
        bash -lc '
          if command -v timeout >/dev/null 2>&1; then
            timeout 45 ./scripts/verification/verify-integration.sh || true
          else
            ./scripts/verification/verify-integration.sh &
            pid=$!
            (
              sleep 45
              if kill -0 "$pid" 2>/dev/null; then
                kill "$pid" 2>/dev/null || true
              fi
            ) & watcher=$!
            wait "$pid" 2>/dev/null || true
            kill "$watcher" 2>/dev/null || true
          fi'

  verify:pty-keys:
    desc: "Start PTY server, send arrow/M/Q/Ctrl+C, parse logs"
    deps:
      - build-all
    cmds:
      - |
        set -euo pipefail
        ART_DIR="_artifacts/{{.VERSION}}"
        DIST="$ART_DIR/pty/dist"
        BIN="$ART_DIR/dotnet/bin"
        echo "Using artifacts at: $ART_DIR"
        # Ensure ws-send-keys is available in dist where ws is installed
        cp -f ../build/test-tools/ws-send-keys.js "$DIST/" || true
        # Start PTY server (robust PID capture)
        BIN_DIR="$BIN" nohup node "$DIST/server.js" > "$ART_DIR/_logs/pty-server.log" 2>&1 &
        srv_pid=$!
        # Fallback to pgrep if PID is not numeric (rare shells/jobcontrol quirks)
        if ! printf '%s' "$srv_pid" | grep -Eq '^[0-9]+$'; then
          srv_pid=$(pgrep -f "node .*$(basename "$DIST")/server.js" | head -n1 || true)
        fi
        printf '%s\n' "$srv_pid" > "$ART_DIR/_logs/pty-server.pid"
        sleep 1
        echo "PTY server PID: $(cat "$ART_DIR/_logs/pty-server.pid" | tr -cd '0-9\n')"
        # Send keys
        node "$DIST/ws-send-keys.js" || true
        # Stop server
        pid_to_kill="$(cat "$ART_DIR/_logs/pty-server.pid" | tr -cd '0-9\n')"
        if [ -n "$pid_to_kill" ]; then
          kill "$pid_to_kill" 2>/dev/null || true
        else
          pkill -f "node .*$(basename "$DIST")/server.js" 2>/dev/null || true
        fi
        sleep 1
        # Parse latest log
        LATEST_LOG=$(ls -t "$BIN/logs"/console-dungeon-*.log 2>/dev/null | head -1 || true)
        if [[ -n "${LATEST_LOG:-}" ]]; then
          echo "Latest log: $LATEST_LOG"
          node ../build/test-tools/parse-keylog.js "$LATEST_LOG"
        else
          echo "No log found in $BIN/logs"
        fi

  verify:pty-keys:dev:
    desc: "Dev mode: run PTY server against source Host Debug bin, send keys, parse source logs"
    deps:
      - build-all
    cmds:
      - |
        set -euo pipefail
        # Build ConsoleDungeon.Host in Debug to produce bin/Debug outputs
        pushd ../development/dotnet/console/src/host/ConsoleDungeon.Host >/dev/null
        dotnet build -c Debug
        SRC_BIN="$(pwd)/bin/Debug/net8.0"
        popd >/dev/null
        # Use latest artifact PTY server for consistency
        ART_DIR="_artifacts/{{.VERSION}}"
        DIST="$ART_DIR/pty/dist"
        echo "Using PTY from: $DIST"
        # Ensure ws-send-keys is available in dist where ws is installed
        cp -f ../build/test-tools/ws-send-keys.js "$DIST/" || true
        # Start PTY server with BIN_DIR pointing at source Debug bin (robust PID capture)
        BIN_DIR="$SRC_BIN" nohup node "$DIST/server.js" > "$ART_DIR/_logs/pty-server-dev.log" 2>&1 &
        srv_pid=$!
        if ! printf '%s' "$srv_pid" | grep -Eq '^[0-9]+$'; then
          srv_pid=$(pgrep -f "node .*$(basename "$DIST")/server.js" | head -n1 || true)
        fi
        printf '%s\n' "$srv_pid" > "$ART_DIR/_logs/pty-server-dev.pid"
        sleep 1
        echo "PTY server (dev) PID: $(cat "$ART_DIR/_logs/pty-server-dev.pid" | tr -cd '0-9\n')"
        # Send keys
        node "$DIST/ws-send-keys.js" || true
        # Stop server
        pid_to_kill="$(cat "$ART_DIR/_logs/pty-server-dev.pid" | tr -cd '0-9\n')"
        if [ -n "$pid_to_kill" ]; then
          kill "$pid_to_kill" 2>/dev/null || true
        else
          pkill -f "node .*$(basename "$DIST")/server.js" 2>/dev/null || true
        fi
        sleep 1
        # Parse latest source Debug log
        SRC_LOG_DIR="$SRC_BIN/logs"
        LATEST_LOG=$(ls -t "$SRC_LOG_DIR"/console-dungeon-*.log 2>/dev/null | head -1 || true)
        if [[ -n "${LATEST_LOG:-}" ]]; then
          echo "Latest source log: $LATEST_LOG"
          node ../build/test-tools/parse-keylog.js "$LATEST_LOG"
        else
          echo "No log found in $SRC_LOG_DIR"
        fi

  dev:start:
    desc: "Start all development services (PTY, docs-site, console) with PM2"
    dir: ../development/nodejs
    cmds:
      - echo "Starting development services with PM2..."
      - pm2 start ecosystem.config.js
      - pm2 save
      - echo "✅ All services started. Use 'task dev:status' to check status"
      - echo 'Note - Console uses ConsoleDungeon.Host (plugin-based architecture)'

  dev:stop:
    desc: "Stop all development services"
    dir: ../development/nodejs
    cmds:
      - pm2 stop all
      - echo "✅ All services stopped"

  dev:restart:
    desc: "Restart all development services"
    dir: ../development/nodejs
    cmds:
      - pm2 restart all
      - echo "✅ All services restarted"

  dev:status:
    desc: "Show status of all development services"
    dir: ../development/nodejs
    cmds:
      - pm2 list
      - echo ""
      - echo "=== Service URLs ==="
      - echo "Astro Web - http://localhost:4321/"
      - echo "Live Terminal (PTY) - http://localhost:4321/demo/"
      - echo "PTY Service - WebSocket on port 4041"
      - echo "Console Dungeon - Running via PTY service"

  dev:logs:
    desc: "Show logs for all development services"
    dir: ../development/nodejs
    cmds:
      - pm2 logs --lines 50

  capture:state:
    desc: "Capture complete application state for current version (screenshots, logs, terminal buffers)"
    dir: ../development/nodejs
    cmds:
      - echo "📸 Capturing versioned state for {{.VERSION}}..."
      - pnpm exec playwright test capture-versioned-state.spec.js --reporter=list
      - echo "✅ Artifacts saved to {{.ARTIFACT_DIR}}/web/"
      - echo "📁 Screenshots {{.ARTIFACT_DIR}}/web/screenshots/"
      - echo "📁 Terminal captures {{.ARTIFACT_DIR}}/web/terminal-captures/"
      - echo "📁 Verification logs {{.ARTIFACT_DIR}}/web/logs/"

  capture:quick:
    desc: "Quick state check without assertions (for rapid iteration)"
    dir: ../development/nodejs
    cmds:
      - pnpm exec playwright test check-dungeon-display.spec.js --reporter=list

  verify:visual:
    desc: "Run visual verification tests with assertions"
    dir: ../development/nodejs
    cmds:
      - pnpm exec playwright test verify-dungeon-gameplay.spec.js --reporter=list
